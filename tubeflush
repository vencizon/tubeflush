#!/bin/bash

NAME=tubeflush
VERSION=development-version

USAGE="$NAME - version $VERSION\n
\n
Usage: $NAME [-eV|N|G|L] [-d|-s|-i] [FILE] [-f] [FORMAT] [-r] [-n] [DIRECTORY]\n
\n
Options:\n
\n
-e\t\tSelect the editor\n
\t\tV - VIM\n
\t\tN - NANO\n
\t\tG - GEDIT\n
\t\tL - LEAFPAD [Default]\n
\n
-d\t\tInsert URLs to download in a new created file\n
\n
-s\t\tSearch on YouTube\n
\n
-v\t\tView video result in streaming.\n
\n
-va\t\tStreaming audio (no video).
\n
-i\t\tInput [FILE]\n
\n
-f\t\tFormat:\n
\t\taac\n
\t\tvorbis\n
\t\tmp3 [Default]\n
\t\tm4a\n
\t\topus\n
\t\twav\n
\n
-n\t\tdirectory where you want to save file.
\n
-r\t\tdon't remove temporary files.
"
FINISHDIR="$(pwd)"	# set finishdir in the directory where tubeflush is launched
DIR="/tmp/tubeflush"	# Working directory
FORMAT=mp3		# set default output format
EDITOR=leafpad	# set default text editor
NOREMOVE=FALSE	

if [ $# -lt 1  ];then	# if there are not arguments on command line
	echo -e $USAGE	#+print $USAGE and exit 1.
	exit 1
fi
if [ ! -d "$DIR"  ]; then
	mkdir -p "$DIR" # create working directory if it doesn't exist.
fi

## FUNCTION ##
function search {	# This function search on youtube using API v.2.0. Require "jshon" and "curl".
	SEARCH1="https://gdata.youtube.com/feeds/api/videos?q="
	max=10  # Max is 10, if $total will be lighter than 20, max = $total, else max remains 10. Max represent the number of video that tubeflush print
	for (( i = 1; i <= "$max"; i++ )); do
		SEARCH2="&orderby=published&start-index="$i"&max-results=1&v=2&alt=json"
		rpc="$(curl -s "$SEARCH1""$1""$SEARCH2")"	
		if [ "$rpc" = "$NULL" ]; then			# il rpc is empty, exit 1 (no connection)
			echo " 404 Not Found."
			exit 1
		fi
		total="$(echo $rpc | jshon -e feed -e 'openSearch$totalResults' -e '$t')" # total il the number of matches
		if (( "$total" == "0" )); then						  # if total is 0, it means that on yt there aren't matches
			echo " No matches found on Youtube..."				  
			exit 1
		else			
			title[i]="$(echo $rpc | jshon -e feed -e entry -a -e title -e '$t' -u )"	# video title
			link[i]="$(echo $rpc | jshon -e feed -e entry -a  -e id -e '$t' -u )"		# video ID
			desc[i]="$(echo $rpc | jshon -e feed -e entry -a -e 'media$group' -e 'media$description' -e '$t' -u )"	# video description  
		fi
		if (( "$total" < "20" )); then	# if there are less than 20 matches, max = $total
			max=$total		
		fi		
		done	
	for (( i = 1; i <= "$max"; i++ )); do
		echo -e "$i) \e[0;0m \033[1m ${title[i]}\n	\e[0;0m${desc[i]} \n"	# output $max matches
	done
	echo "Select number (0 for exit):"		# select $__N
	read __N
	while (( "$__N" > "$max" )); do
		echo "Please type number smaller than $max: "
		read __N
	done
	if [ "$__N" = "$NULL" ] || [ "$__N" = "0" ]; then
		exit 0
	else
		echo "Download of: ${title[__N]}"
		id="$(echo ${link[__N]} | rev | cut -d: -f1 | rev)"			# clean video ID
		echo https://www.youtube.com/watch?v="$id" >> "$DIR"/list	# NOW, "$DIR"/list in $FILE
	fi
}

function view {
	SEARCH1="https://gdata.youtube.com/feeds/api/videos?q="
	max=10  # Max is 10, if $total will be lighter than 20, max = $total, else max remains 10. Max represent the number of video that tubeflush print
	for (( i = 1; i <= "$max"; i++ )); do
		SEARCH2="&orderby=published&start-index="$i"&max-results=1&v=2&alt=json"
		rpc="$(curl -s "$SEARCH1""$1""$SEARCH2")"	
		if [ "$rpc" = "$NULL" ]; then			# il rpc is empty, exit 1 (no connection)
			echo " 404 Not Found."
			exit 1
		fi
		total="$(echo $rpc | jshon -e feed -e 'openSearch$totalResults' -e '$t')" # total il the number of matches
		if (( "$total" == "0" )); then						  # if total is 0, it means that on yt there aren't matches
			echo " No matches found on Youtube..."				  
			exit 1
		else			
			title[i]="$(echo $rpc | jshon -e feed -e entry -a -e title -e '$t' -u )"	# video title
			link[i]="$(echo $rpc | jshon -e feed -e entry -a  -e id -e '$t' -u )"		# video ID
			desc[i]="$(echo $rpc | jshon -e feed -e entry -a -e 'media$group' -e 'media$description' -e '$t' -u )"	# video description  
		fi
		if (( "$total" < "20" )); then	# if there are less than 20 matches, max = $total
			max=$total		
		fi		
		done	
	for (( i = 1; i <= "$max"; i++ )); do
		echo -e "$i) \e[0;0m \033[1m ${title[i]}\n	\e[0;0m${desc[i]} \n"	# output all matches
	done
	echo "Select number:"		# select $__N
	read __N
	while (( "$__N" > "$max" )); do
		echo "Please type number smaller than $max (0 for exit): "
		read __N
		if [ "$__N" = "$NULL" ]; then
		exit 0
		fi
	done
	if [ "$__N" = "$NULL" ] || [ "$__N" = "0" ]; then
		exit 0
	else
		echo "Resolving link for: ${title[__N]}"
		id="$(echo ${link[__N]} | rev | cut -d: -f1 | rev)" # clean video ID
		video="https://www.youtube.com/watch?v="$id""
		mplayer $video >/dev/null 2>&1
	fi
	exit 0
}
## END FUNCTION ##

while getopts "e:i: d f: r n:s:v: m:" opt	# Parsing command line
do
	case "$opt" in
		"e")
			if [ "${#OPTARG}" != "1" ]; then	# ${#OPTARG} is the number of optarg.
				echo "You can choose only one text editor." #+ if there is not only one argument on switch -e
				echo 										#+ exit with error because user can uso only one text editor
				echo -e $USAGE
				exit 1
			else
				case "$OPTARG" in		# set text editor. if -e doesn't exist, Leafpad is default.
					'V'|'v')
						EDITOR=vim
						;;
					'N'|'n')
						EDITOR=nano
						;;
					'G'|'g')
						EDITOR=gedit
						;;
					'L'|'l')
						EDITOR=leafpad
						;;
					*)
						echo -e "\tERROR" 
						echo -e $USAGE
						exit 1
						;;
				esac
			fi
			;;
		"n")					# set a finish directory != pwd
			FINISHDIR=$OPTARG
			;;
		"v")
			view $OPTARG	# $OPTARG is the string that user want to search on Youtube
			;;
		"i")
			if [ $# -lt 2 ];then
				echo "error arguments"
				echo -e $USAGE
				exit 1
			elif [ $# -gt 2 ];then
				if [ "$1" == "-i" ];then
				       if [ "${2:0:1}" != "-" ];then
					       cp "$2" "$DIR"/input_file_for_download
					       FILE="$DIR"/input_file_for_download
				       else
					       echo -e "\tERROR"
					       echo -e $USAGE
					       exit 1
				       fi
				fi
			else
				echo -e "\tERROR"
				echo -e $USAGE
				exit 1
			fi
			;;
			
		"d")
			FILE="$DIR"/input_file_for_download
			touch $FILE
			$EDITOR $FILE
			;;
		"f")
			FORMAT=$OPTARG
			;;
		"r")	
			NOREMOVE=TRUE
			;;
		"s")
			search $OPTARG
			FILE="$DIR"/list
			;;
		":")
			echo "no argument."
			exit 1
			;;
		"?")
			echo -e "\tERROR"
			echo -e $USAGE
			exit 1
			;;
			
		*)
			echo "\tERROR"
			exit 1
			;;
	esac
done

if [ ! -d "$FINISHDIR" ]; then	# check if directory exist
	echo -e "$FINISHDIR doesn't exists. Create now..."
	mkdir -p "$FINISHDIR"
fi

cd "$DIR"
URLNUMBER=0
for URL in `cat $FILE`; do
	((URLNUMBER++))	
	LIST[$URLNUMBER]=$URL	# LIST[i] is an array that contains all link found in $FILE
done
_num="$(cat $FILE | wc -w)" # count number of link
if [ $_num -eq 0 ]; then	# if there aren't link, exit 1 
	echo "No link found..."
	echo -e $USAGE
	exit 1
else
	for (( i = 1; i<= "$URLNUMBER"; i++ )); do
		youtube-dl "${LIST[i]}" --title --continue --no-overwrites --extract-audio --audio-format $FORMAT || exit 1
		if [ "$FORMAT" = "vorbis" ]; then
			mv "$DIR"/*.ogg "$FINISHDIR"/ || exit 1
		else
			mv "$DIR"/*."$FORMAT" "$FINISHDIR" || exit 1
		fi
	done
fi
if [ "$NOREMOVE" = "FALSE" ]; then
	rm -rf $DIR
fi
cd
exit 0
